{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const customFetch = useCallback(async (endpoint, params) => {\n    const cacheKey = JSON.stringify({\n      endpoint,\n      params\n    });\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }, [cache]);\n  const clearCache = useCallback(() => {\n    if (cache !== null && cache !== void 0 && cache.current) {\n      cache.current = new Map();\n    }\n  }, [cache]);\n  return {\n    customFetch,\n    clearCache\n  };\n}\n\n_s(useCustomFetch, \"fcMYSbqwif+lJfWO+9yyMC9CUfw=\");","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useCustomFetch","cache","customFetch","endpoint","params","cacheKey","JSON","stringify","cacheResponse","current","get","data","parse","result","set","clearCache","Map"],"sources":["/Users/sbmac/Downloads/ramp-fe-challenge-solved/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n\n  const customFetch = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData> => {\n      const cacheKey = JSON.stringify({ endpoint, params })\n      const cacheResponse = cache?.current.get(cacheKey)\n\n      if (cacheResponse) {\n        const data = JSON.parse(cacheResponse)\n        return data as Promise<TData>\n      }\n\n      const result = await fakeFetch<TData>(endpoint, params)\n      cache?.current.set(cacheKey, JSON.stringify(result))\n      return result\n    },\n    [cache]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current) {\n      cache.current = new Map<string, string>()\n    }\n  }, [cache])\n\n  return { customFetch, clearCache }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA+C,gBAA/C;AAEA,OAAO,SAASC,cAAT,GAA0B;EAAA;;EAC/B,MAAM;IAAEC;EAAF,IAAYJ,UAAU,CAACC,UAAD,CAA5B;EAEA,MAAMI,WAAW,GAAGN,WAAW,CAC7B,OACEO,QADF,EAEEC,MAFF,KAGqB;IACnB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAEJ,QAAF;MAAYC;IAAZ,CAAf,CAAjB;IACA,MAAMI,aAAa,GAAGP,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEQ,OAAP,CAAeC,GAAf,CAAmBL,QAAnB,CAAtB;;IAEA,IAAIG,aAAJ,EAAmB;MACjB,MAAMG,IAAI,GAAGL,IAAI,CAACM,KAAL,CAAWJ,aAAX,CAAb;MACA,OAAOG,IAAP;IACD;;IAED,MAAME,MAAM,GAAG,MAAMd,SAAS,CAAQI,QAAR,EAAkBC,MAAlB,CAA9B;IACAH,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEQ,OAAP,CAAeK,GAAf,CAAmBT,QAAnB,EAA6BC,IAAI,CAACC,SAAL,CAAeM,MAAf,CAA7B;IACA,OAAOA,MAAP;EACD,CAhB4B,EAiB7B,CAACZ,KAAD,CAjB6B,CAA/B;EAoBA,MAAMc,UAAU,GAAGnB,WAAW,CAAC,MAAM;IACnC,IAAIK,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEQ,OAAX,EAAoB;MAClBR,KAAK,CAACQ,OAAN,GAAgB,IAAIO,GAAJ,EAAhB;IACD;EACF,CAJ6B,EAI3B,CAACf,KAAD,CAJ2B,CAA9B;EAMA,OAAO;IAAEC,WAAF;IAAea;EAAf,CAAP;AACD;;GA9Bef,c"},"metadata":{},"sourceType":"module"}