{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    customFetch\n  } = useCustomFetch();\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(employeeId => wrappedRequest(async () => {\n    const data = await customFetch(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n  }), [customFetch, wrappedRequest]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"+rqzYNdX+Qv3O296cM20ukXzLLA=\", false, function () {\n  return [useCustomFetch, useWrappedRequest];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useWrappedRequest","useTransactionsByEmployee","customFetch","loading","wrappedRequest","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","invalidateData"],"sources":["/Users/sbmac/Downloads/ramp-fe-challenge-solved/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { customFetch } = useCustomFetch()\n  const { loading, wrappedRequest } = useWrappedRequest()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    (employeeId: string) =>\n      wrappedRequest(async () => {\n        const data = await customFetch<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          {\n            employeeId,\n          }\n        )\n\n        setTransactionsByEmployee(data)\n      }),\n    [customFetch, wrappedRequest]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC;EAAF,IAAkBH,cAAc,EAAtC;EACA,MAAM;IAAEI,OAAF;IAAWC;EAAX,IAA8BJ,iBAAiB,EAArD;EACA,MAAM,CAACK,sBAAD,EAAyBC,yBAAzB,IAAsDR,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMS,SAAS,GAAGV,WAAW,CAC1BW,UAAD,IACEJ,cAAc,CAAC,YAAY;IACzB,MAAMK,IAAI,GAAG,MAAMP,WAAW,CAC5B,wBAD4B,EAE5B;MACEM;IADF,CAF4B,CAA9B;IAOAF,yBAAyB,CAACG,IAAD,CAAzB;EACD,CATa,CAFW,EAY3B,CAACP,WAAD,EAAcE,cAAd,CAZ2B,CAA7B;EAeA,MAAMM,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCS,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEG,IAAI,EAAEJ,sBAAR;IAAgCF,OAAhC;IAAyCI,SAAzC;IAAoDG;EAApD,CAAP;AACD;;GAzBeT,yB;UACUF,c,EACYC,iB"},"metadata":{},"sourceType":"module"}